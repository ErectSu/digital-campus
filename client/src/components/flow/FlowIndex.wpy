<template>
  <view class="flow">
    <!--自由流程-->
    <view wx:if="{{flow.flowType === 0}}">
      <freeFlow :ccPerson.sync="ccPerson"></freeFlow>
    </view>
    <!--固定流程-->
    <view wx:elif="{{flow.flowType === 1}}">
      <fixedFlow :ccPerson.sync="ccPerson"></fixedFlow>
    </view>
    <!--分支流程-->
    <view wx:else>
      <branchFlow :ccPerson.sync="ccPerson"></branchFlow>
    </view>
    <!--当前节点需要选择的节点处理人-->
    <pendingNode :pendingNode.sync="pendingNode" :isShow.sync="showPendingNode"></pendingNode>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import FreeFlow from '../../components/flow/FreeFlow';
  import FixedFlow from '../../components/flow/FixedFlow';
  import BranchFlow from '../../components/flow/BranchFlow';
  import PendingNode from '../../components/flow/PendingNode';

  export default class FlowIndex extends wepy.component {
    props = {
      ccPerson: Array,
    };

    data = {
      flow: {},
      currentNode: {},
      nodePersons: [],
      pendingNode: [],
      showPendingNode: false,
      pageType: '',
    };

    components = {
      freeFlow: FreeFlow,
      fixedFlow: FixedFlow,
      branchFlow: BranchFlow,
      pendingNode: PendingNode,
    };

    methods = {
      // 导出流程数据到父组件
      exportFlow() {
        let flowData = {};
        if (this.flow.flowType === 0) {
          // 自由流程
          flowData.flow = this.flow;
          flowData.currentNode = this.currentNode;
          if (this.pendingNode.length) {
            flowData.pendingNode = this.pendingNode;
          }
        } else if (this.flow.flowType === 1) {
          // 固定流程
          flowData = this.$invoke('fixedFlow', 'exportFlow');
          flowData.pendingNode = this.pendingNode;
          if (this.pendingNode.length) {
            flowData.pendingNode = this.pendingNode;
          }
        } else {
          // 分支流程
          flowData = this.$invoke('branchFlow', 'exportFlow');
          flowData.pendingNode = this.pendingNode;
          if (this.pendingNode.length) {
            flowData.pendingNode = this.pendingNode;
          }
        }
        flowData.flowType = this.flow.flowType;
        return flowData;
      },
      // 获取父组件异步传递的数据
      getProp(prop) {
        this.flow = prop.flow || this.flow;
        this.pendingNode = prop.pendingNode || this.pendingNode;
        this.currentNode = prop.currentNode || this.currentNode;
        this.nodePersons = prop.nodePersons || this.nodePersons;
        this.pageType = prop.pageType || this.pageType;
        if (prop.flow.flowType === 0) {
          // 自由流程
          this.$invoke('freeFlow', 'getProp', {
            flow: prop.flow,
            flowType: 0,
            pageType: prop.pageType,
            currentNode: prop.currentNode,
          });
        } else if (prop.flow.flowType === 1) {
          // 固定流程
          this.$invoke('fixedFlow', 'getProp', {
            flow: prop.flow,
            flowType: 1,
            defaultFlow:prop.defaultFlow,
            pageType: prop.pageType,
            currentNode: prop.currentNode,
          });
        } else if (prop.flow.flowType === 2) {
          // 分支流程
          this.$invoke('branchFlow', 'getProp', {
            flow: prop.flow.branchFlow,
            flowType: 2,
            pageType: prop.pageType,
            currentNode: prop.currentNode,
          });
        }
      },
      // 选择需要当前节点确定的处理人
      pendingNodePerson() {
        this.showPendingNode = true;
      },

    };

    events = {
      // 接收自由流程处理人
      freeFlowPerson(persons) {
        this.currentNode.nodePersons = persons;
      },
      // 获取需要当前节点确定处理人的节点
      getPendingNode(nodes) {
        this.pendingNode = nodes;
      },
    };

    watch = {};

    computed = {};

    onLoad() {
    };

    onShow() {
    };
  }
</script>

<style lang='less'>
</style>
